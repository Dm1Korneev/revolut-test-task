{"version":3,"sources":["Redux/middlewares/error.ts","Redux/reducers/error.ts","Redux/shared.ts","Redux/actions.ts","Constants/actionNames.ts","Constants/index.ts","Redux/reducers/rates.ts","Redux/reducers/pockets.ts","Redux/reducers/exchange.ts","Redux/reducers/index.ts","Redux/reducers/loaded.ts","Redux/reducers/loading.ts","API/dummyData.ts","API/requests.ts","Redux/sagas/getPocketsSaga.ts","Redux/sagas/getRatesSaga.ts","Selectors/pockets.ts","Selectors/exchange.ts","Selectors/rates.ts","Helpers/index.ts","Redux/sagas/changeWriteOffValueSaga.ts","Redux/sagas/changeReceiveValueSaga.ts","Redux/sagas/exchangeSaga.ts","Redux/sagas/dropExchangeValuesSaga.ts","Redux/sagas/index.ts","Redux/store.ts","Components/commonHoc.ts","Selectors/loaded.ts","Selectors/currencies.ts","Components/CurrencySelect/CurrencySelect.styled.ts","Components/CurrencySelect/index.tsx","Components/ValueInput/ValueInput.styled.ts","Components/ValueInput/index.tsx","Components/Pocket/PocketValue.tsx","Components/Pocket/Pocket.styled.ts","Components/Pocket/index.tsx","Components/PocketFrom/index.ts","Components/PocketFrom/PocketFrom.tsx","Components/CurrentRate/index.ts","Components/CurrentRate/CurrentRate.tsx","Components/PocketTo/index.ts","Components/PocketTo/PocketTo.tsx","Components/ExchangeButton/ExchangeButton.styled.ts","Components/ExchangeButton/index.ts","Components/ExchangeButton/ExchangeButton.tsx","Components/Loader/Loader.styled.ts","Components/Loader/index.tsx","Components/ChangePocketsButton/ChangePocketsButton.styled.ts","Components/ChangePocketsButton/index.ts","Components/ChangePocketsButton/ChangePocketsButton.tsx","Components/CurrencyConverter/CurrencyConverter.styled.ts","Components/CurrencyConverter/index.ts","Components/CurrencyConverter/CurrencyConverter.tsx","Components/App/App.styled.ts","Components/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["next","action","payload","error","console","warn","getRequestAction","name","createAction","getSuccessAction","getFailureAction","getRates","setRates","getPockets","setPockets","setPocketFrom","setPocketTo","changeWriteOffValue","changeReceiveValue","setWriteOffValue","setReceiveValue","dropExchangeValues","exchange","changePockets","CURRENCIES","CURRENCY_SYMBOLS","createReducer","base","ratesValues","timestamp","builder","addCase","state","rates","forEach","currency","pockets","defaultStore","pocketFrom","pocketTo","writeOffValue","receiveValue","rootReducer","combineReducers","loaded","type","matches","exec","requestName","loading","requestState","errors","GBP","EUR","USD","parseJSON","response","Promise","resolve","json","then","result","URI","optionsParams","options","headers","Accept","reject","fetch","ok","apiCall","process","method","mode","getPocketsSaga","call","getPocketsApi","put","getRatesSaga","getRatesApi","pocketsSelector","pocketValueSelector","createSelector","exchangeSelector","pocketFromCurrencySelector","pocketToCurrencySelector","writeOffValueSelector","receiveValueSelector","pocketFromValueSelector","pocketToValueSelector","exchagesValuesIsSetSelector","currenciesFromToSameSelector","currencyFrom","currencyTo","ratesSelector","ratesValuesSelector","rateSelector","getCurrencySymbol","roundPlus","value","decimals","Number","Math","round","changeWriteOffValueSaga","select","rate","all","changeReceiveValueSaga","exchangeSaga","Error","pocketFromValue","pocketFToValue","dropExchangeValuesSaga","rootSaga","takeEvery","storeFactory","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","middleware","getDefaultMiddleware","errorMiddleware","devTools","run","commonHoc","component","params","mapStateToProps","mapDispatchToProps","isConnected","ConnectedComponent","dispatchMapper","dispatch","bindActionCreators","connect","loadedSelector","getRatesLoadedSelector","currenciesSelector","Select","styled","CurrencySelect","props","currencies","setPocketCurrency","label","onChange","event","target","aria-label","map","element","key","Input","input","PrefixContainer","span","ValueInput","changeValue","valuePrefix","valueForInput","valuePrefixString","step","valueAsNumber","isNaN","newValue","floor","floorPlus","PocketValue","toFixed","Container","div","InputsLine","InfoLine","Pocket","valueHave","children","selectCurrencyLabel","inputValueLabel","currentRate","reverse","Button","button","isActive","onClick","disabled","spinner","keyframes","Spinner","Loader","BlockFrom","BlockTo","CurrentRateContainer","ChangePocketsContainer","Title","h1","interval","undefined","this","setInterval","clearInterval","isBusy","Component","main","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registrationParam","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.30f49b62.chunk.js","sourcesContent":["import { Dispatch } from 'redux';\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nexport default () => (next: Dispatch) => <P extends {error: string}>(action: PayloadAction<P>): PayloadAction<P> => {\n  if (action.payload && action.payload.error) {\n    console.warn('[Error Middleware error]:', action.payload.error); /* eslint-disable-line no-console */\n  }\n\n  return next(action);\n};\n\n","\nimport { PayloadAction } from '@reduxjs/toolkit';\n\ntype ErrorState = {[id: string]: string}\n\nexport default (state = {}, action: PayloadAction<any>): ErrorState => {\n  const { type, payload } = action;\n  const matches = /(.*)_(REQUEST|FAILURE)/.exec(type);\n\n  if (!matches) return state;\n\n  const [, requestName, requestState] = matches;\n  return {\n    ...state,\n    [requestName]: requestState === 'FAILURE' ? payload && payload.error : '',\n  };\n};\n","import { PayloadActionCreator, createAction } from '@reduxjs/toolkit';\n\nexport const getRequestAction = <P = void>(name: string): PayloadActionCreator<P> => createAction<P>(`${name}_REQUEST`);\n\nexport const getSuccessAction = <P = void>(name: string): PayloadActionCreator<P> => createAction<P>(`${name}_SUCCESS`);\n\nexport const getFailureAction = <P = void>(name: string): PayloadActionCreator<P> => createAction<P>(`${name}_FAILURE`);\n\n","import { createAction } from '@reduxjs/toolkit';\n\nimport { getRequestAction } from 'Redux/shared';\nimport {\n  CHANGE_POCKETS, CHANGE_RECEIVE_VALUE, CHANGE_WRITE_OFF_VALUE, DROP_EXCHANGE_VALUES, EXCHANGE, GET_POCKETS,\n  GET_RATES, SET_POCKETS, SET_POCKET_FROM, SET_POCKET_TO, SET_RATES, SET_RECEIVE_VALUE, SET_WRITE_OFF_VALUE,\n} from 'Constants/actionNames';\n\nexport const getRates = getRequestAction(GET_RATES);\n\ninterface SetRates {\n  rates: {\n    rates: {[id: string]: number};\n    timestamp: string;\n    base: string;\n  };\n}\nexport const setRates = createAction<SetRates>(SET_RATES);\n\nexport const getPockets = getRequestAction(GET_POCKETS);\n\ninterface SetPockets {\n  pockets: {[id: string]: number};\n}\nexport const setPockets = createAction<SetPockets>(SET_POCKETS);\n\nexport const setPocketFrom = createAction<string>(SET_POCKET_FROM);\n\nexport const setPocketTo = createAction<string>(SET_POCKET_TO);\n\nexport const changeWriteOffValue = createAction<number | null>(CHANGE_WRITE_OFF_VALUE);\n\nexport const changeReceiveValue = createAction<number | null>(CHANGE_RECEIVE_VALUE);\n\nexport const setWriteOffValue = createAction<number | null>(SET_WRITE_OFF_VALUE);\n\nexport const setReceiveValue = createAction<number | null>(SET_RECEIVE_VALUE);\n\nexport const dropExchangeValues = createAction(DROP_EXCHANGE_VALUES);\n\nexport const exchange = getRequestAction(EXCHANGE);\n\nexport const changePockets = createAction(CHANGE_POCKETS);\n","export const GET_RATES = 'GET_RATES';\nexport const SET_RATES = 'SET_RATES';\n\nexport const GET_POCKETS = 'GET_POCKETS';\nexport const SET_POCKETS = 'SET_POCKETS';\n\nexport const SET_POCKET_FROM = 'SET_POCKET_FROM';\nexport const SET_POCKET_TO = 'SET_POCKET_TO';\n\nexport const CHANGE_POCKETS = 'CHANGE_POCKETS';\n\nexport const CHANGE_WRITE_OFF_VALUE = 'CHANGE_WRITE_OFF_VALUE';\nexport const CHANGE_RECEIVE_VALUE = 'CHANGE_RECEIVE_VALUE';\n\nexport const DROP_EXCHANGE_VALUES = 'DROP_EXCHANGE_VALUES';\n\nexport const SET_WRITE_OFF_VALUE = 'SET_WRITE_OFF_VALUE';\nexport const SET_RECEIVE_VALUE = 'SET_RECEIVE_VALUE';\n\nexport const EXCHANGE = 'EXCHANGE';\n","export const CURRENCIES_RATE_API_ID = process.env.REACT_APP_CURRENCIES_RATE_API_ID;\nexport const CURRENCIES_RATE_API_URL = 'https://openexchangerates.org/api';\n\nexport const RATES_RELOAD_PERIOD = 10000;\n\nexport const GBP = 'GBP';\nexport const EUR = 'EUR';\nexport const USD = 'USD';\n\nexport const CURRENCIES = [GBP, EUR, USD];\n\nexport const CURRENCY_SYMBOLS: {[id: string]: string} = { [GBP]: '£', [EUR]: '€', [USD]: '$' };\n","import { createReducer } from '@reduxjs/toolkit';\n\nimport { setRates } from 'Redux/actions';\nimport { CURRENCIES } from 'Constants';\n\nexport type RatesState = {\n  base: string | null;\n  ratesValues: {[id: string]: number};\n  timestamp: string | null;\n}\nconst defaultStore: RatesState = {\n  base: null,\n  ratesValues: {},\n  timestamp: null,\n};\n\nexport default createReducer(defaultStore, (builder) => builder\n  .addCase(setRates, (state, action) => {\n    const ratesValues: {[id: string]: number} = {};\n    const { rates, base, timestamp } = action.payload.rates;\n    CURRENCIES.forEach((currency) => {\n      if (rates[currency]) {\n        ratesValues[currency] = rates[currency];\n      }\n    });\n\n    return {\n      base, ratesValues, timestamp,\n    };\n  }));\n","import { createReducer } from '@reduxjs/toolkit';\n\nimport { setPockets } from 'Redux/actions';\n\nexport type PocketsState = {[id: string]: number}\n\nconst defaultStore: PocketsState = {};\n\nexport default createReducer(defaultStore, (builder) => builder\n  .addCase(setPockets, (state, action) => ({ ...state, ...action.payload.pockets })));\n","import { createReducer } from '@reduxjs/toolkit';\n\nimport { CURRENCIES } from 'Constants';\nimport {\n  changePockets, dropExchangeValues, setPocketFrom, setPocketTo, setReceiveValue, setWriteOffValue,\n} from 'Redux/actions';\n\nexport type ExchangeState = {\n  pocketFrom: string;\n  pocketTo: string;\n  writeOffValue: number | null;\n  receiveValue: number | null;\n}\nconst defaultStore: ExchangeState = {\n  pocketFrom: CURRENCIES[0],\n  pocketTo: CURRENCIES[1],\n  writeOffValue: null,\n  receiveValue: null,\n};\n\nexport default createReducer(defaultStore, (builder) => builder\n  .addCase(setPocketFrom, (state, action) => ({ ...state, pocketFrom: action.payload }))\n  .addCase(setPocketTo, (state, action) => ({ ...state, pocketTo: action.payload }))\n  .addCase(setWriteOffValue, (state, action) => ({ ...state, writeOffValue: action.payload }))\n  .addCase(setReceiveValue, (state, action) => ({ ...state, receiveValue: action.payload }))\n  .addCase(dropExchangeValues, (state) => ({ ...state, writeOffValue: null, receiveValue: null }))\n  .addCase(changePockets, (state) => ({ ...state, pocketFrom: state.pocketTo, pocketTo: state.pocketFrom })));\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport loading from './loading';\nimport loaded from './loaded';\nimport errors from './error';\nimport rates from './rates';\nimport pockets from './pockets';\nimport exchange from './exchange';\n\nconst rootReducer = combineReducers({\n  loaded,\n  loading,\n  errors,\n  rates,\n  pockets,\n  exchange,\n});\nexport default rootReducer;\n\nexport type StateType = ReturnType<typeof rootReducer>\n","import { Action } from '@reduxjs/toolkit';\n\nexport type LoadedState = {[id: string]: number}\n\nexport default function loadedReducer(state = {}, action: Action): LoadedState {\n  if (!action) {\n    return state;\n  }\n\n  const { type } = action;\n  const matches = /(.*)_(SUCCESS)/.exec(type);\n\n  if (!matches) return state;\n\n  const [, requestName] = matches;\n  return {\n    ...state,\n    [requestName]: true,\n  };\n}\n","import { Action } from '@reduxjs/toolkit';\n\nexport type LoadingState = {[id: string]: number}\n\nexport default function loadingReducer(state = {}, action: Action): LoadingState {\n  if (!action) {\n    return state;\n  }\n\n  const { type } = action;\n  const matches = /(.*)_(REQUEST|SUCCESS|FAILURE)/.exec(type);\n\n  if (!matches) return state;\n\n  const [, requestName, requestState] = matches;\n  return {\n    ...state,\n    [requestName]: requestState === 'REQUEST',\n  };\n}\n","export const pockets = {\n  GBP: 160.45,\n  EUR: 540.00,\n  USD: 2201.50,\n};\n\n","import { CURRENCIES_RATE_API_ID, CURRENCIES_RATE_API_URL } from 'Constants';\nimport { pockets } from './dummyData';\n\ntype parseJSONInterface = {\n  response: Response;\n  result: object;\n}\n\nfunction parseJSON(response: Response): Promise<parseJSONInterface> {\n  return new Promise((resolve) => response.json().then((result) => resolve({\n    response,\n    result,\n  })));\n}\n\nfunction apiCall(URI: RequestInfo, optionsParams: RequestInit): Promise<object> {\n  const options = {\n    ...optionsParams,\n    headers: {\n      ...optionsParams.headers,\n      Accept: 'application/json',\n    },\n  };\n\n  return new Promise((resolve, reject) => {\n    fetch(URI, options)\n      .then(parseJSON)\n      .then(({ response, result }: parseJSONInterface) => {\n        if (response.ok) {\n          return resolve(result);\n        }\n        return reject(result);\n      });\n  });\n}\n\nexport const getPockets = (): object => new Promise((resolve) => resolve(pockets));\n\nexport const getRates = (): object => {\n  const uri = `${CURRENCIES_RATE_API_URL}/latest.json?app_id=${CURRENCIES_RATE_API_ID}`;\n  const options = {\n    method: 'GET',\n    mode: 'cors' as RequestMode,\n  };\n\n  return apiCall(uri, options);\n};\n\n","import { call, put } from 'redux-saga/effects';\nimport { SagaIterator } from 'redux-saga';\nimport { getPockets as getPocketsApi } from 'API/requests';\nimport { getFailureAction, getSuccessAction } from 'Redux/shared';\nimport { setPockets } from 'Redux/actions';\nimport { GET_POCKETS } from 'Constants/actionNames';\n\nexport default function* getPocketsSaga(): SagaIterator {\n  try {\n    const pockets = yield call(getPocketsApi);\n    yield put(setPockets({ pockets }));\n    yield put(getSuccessAction<object>(GET_POCKETS)({ pockets }));\n  } catch (error) {\n    yield put(getFailureAction<object>(GET_POCKETS)({ error }));\n  }\n}\n","import { call, put } from 'redux-saga/effects';\nimport { SagaIterator } from 'redux-saga';\nimport { getRates as getRatesApi } from 'API/requests';\nimport { getFailureAction, getSuccessAction } from 'Redux/shared';\nimport { setRates } from 'Redux/actions';\nimport { GET_RATES } from 'Constants/actionNames';\n\nexport default function* getRatesSaga(): SagaIterator {\n  try {\n    const rates = yield call(getRatesApi);\n    yield put(getSuccessAction<object>(GET_RATES)({ rates }));\n    yield put(setRates({ rates }));\n  } catch (error) {\n    yield put(getFailureAction<object>(GET_RATES)({ error }));\n  }\n}\n","import { createSelector } from '@reduxjs/toolkit';\nimport { StateType } from 'Redux/store';\n\nconst pocketsSelector = (state: StateType): StateType['pockets'] => state.pockets;\n\nexport const pocketValueSelector = (state: StateType, currency: string): number => createSelector(\n  pocketsSelector,\n  (pockets) => pockets[currency],\n)(state);\n","import { createSelector } from '@reduxjs/toolkit';\nimport { StateType } from 'Redux/store';\n\nimport { pocketValueSelector } from './pockets';\n\nconst exchangeSelector = (state: StateType): StateType['exchange'] => state.exchange;\n\nexport const pocketFromCurrencySelector = (state: StateType): string => createSelector(\n  exchangeSelector,\n  (exchange) => exchange.pocketFrom,\n)(state);\n\nexport const pocketToCurrencySelector = (state: StateType): string => createSelector(\n  exchangeSelector,\n  (exchange) => exchange.pocketTo,\n)(state);\n\nexport const writeOffValueSelector = (state: StateType): number | null => createSelector(\n  exchangeSelector,\n  (exchange) => exchange.writeOffValue,\n)(state);\n\nexport const receiveValueSelector = (state: StateType): number | null => createSelector(\n  exchangeSelector,\n  (exchange) => exchange.receiveValue,\n)(state);\n\nexport const pocketFromValueSelector = (state: StateType): number => createSelector(\n  pocketFromCurrencySelector,\n  (currency) => pocketValueSelector(state, currency),\n)(state);\n\nexport const pocketToValueSelector = (state: StateType): number => createSelector(\n  pocketToCurrencySelector,\n  (currency) => pocketValueSelector(state, currency),\n)(state);\n\nexport const exchagesValuesIsSetSelector = (state: StateType): boolean => createSelector(\n  [writeOffValueSelector, receiveValueSelector],\n  (writeOffValue, receiveValue) => !!writeOffValue && !!receiveValue,\n)(state);\n\nexport const currenciesFromToSameSelector = (state: StateType): boolean => createSelector(\n  [pocketFromCurrencySelector, pocketToCurrencySelector],\n  (currencyFrom, currencyTo) => currencyFrom === currencyTo,\n)(state);\n\n","import { createSelector } from '@reduxjs/toolkit';\nimport { StateType } from 'Redux/store';\n\nconst ratesSelector = (state: StateType): StateType['rates'] => state.rates;\n\nconst ratesValuesSelector = (state: StateType): {[id: string]: number} => createSelector(\n  ratesSelector,\n  (rates) => rates.ratesValues,\n)(state);\n\nexport const rateSelector = (state: StateType, currencyFrom: string, currencyTo: string): number => createSelector(\n  ratesValuesSelector,\n  (ratesValues) => ratesValues[currencyTo] / ratesValues[currencyFrom]\n  ,\n)(state);\n","import { CURRENCY_SYMBOLS } from 'Constants';\n\nexport const getCurrencySymbol = (currency: string): string => CURRENCY_SYMBOLS[currency];\n\nexport const floorPlus = (value: number, decimals = 2): number => Number(\n  `${Math.floor(\n    Number(`${value}e${decimals}`),\n  )}e-${decimals}`,\n);\n\nexport const roundPlus = (value: number, decimals = 2): number => Number(\n  `${Math.round(\n    Number(`${value}e${decimals}`),\n  )}e-${decimals}`,\n);\n","import {\n  all, put, select,\n} from 'redux-saga/effects';\nimport { SagaIterator } from 'redux-saga';\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport {\n  pocketFromCurrencySelector, pocketFromValueSelector, pocketToCurrencySelector,\n} from 'Selectors/exchange';\nimport { rateSelector } from 'Selectors/rates';\nimport { roundPlus } from 'Helpers';\nimport { setReceiveValue, setWriteOffValue } from 'Redux/actions';\n\nexport default function* changeWriteOffValueSaga(action: PayloadAction<number>): SagaIterator {\n  const writeOffValue = action.payload;\n  let receiveValue;\n  if (writeOffValue === null) {\n    receiveValue = null;\n  } else {\n    const pocketFromValue = pocketFromValueSelector(yield select());\n    if (pocketFromValue < writeOffValue) {\n      return;\n    }\n\n    const currencyFrom = pocketFromCurrencySelector(yield select());\n    const currencyTo = pocketToCurrencySelector(yield select());\n    const rate = rateSelector(yield select(), currencyFrom, currencyTo);\n\n    receiveValue = roundPlus(writeOffValue * rate);\n  }\n\n  yield all([\n    put(setWriteOffValue(writeOffValue)),\n    put(setReceiveValue(receiveValue)),\n  ]);\n}\n","import {\n  all, put, select,\n} from 'redux-saga/effects';\nimport { SagaIterator } from 'redux-saga';\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport {\n  pocketFromCurrencySelector, pocketFromValueSelector, pocketToCurrencySelector,\n} from 'Selectors/exchange';\nimport { rateSelector } from 'Selectors/rates';\nimport { roundPlus } from 'Helpers';\nimport { setReceiveValue, setWriteOffValue } from 'Redux/actions';\n\nexport default function* changeReceiveValueSaga(action: PayloadAction<number>): SagaIterator {\n  const receiveValue = action.payload;\n  let writeOffValue;\n  if (receiveValue === null) {\n    writeOffValue = null;\n  } else {\n    const currencyFrom = pocketFromCurrencySelector(yield select());\n    const currencyTo = pocketToCurrencySelector(yield select());\n    const rate = yield select(rateSelector, currencyTo, currencyFrom);\n\n    writeOffValue = roundPlus(receiveValue * rate);\n\n    const pocketFromValue = pocketFromValueSelector(yield select());\n    if (pocketFromValue < writeOffValue) {\n      return;\n    }\n  }\n\n  yield all([\n    put(setWriteOffValue(writeOffValue)),\n    put(setReceiveValue(receiveValue)),\n  ]);\n}\n","import { all, put, select } from 'redux-saga/effects';\nimport { SagaIterator } from 'redux-saga';\nimport { setPockets } from 'Redux/actions';\nimport { EXCHANGE } from 'Constants/actionNames';\nimport { getFailureAction, getSuccessAction } from 'Redux/shared';\nimport {\n  pocketFromCurrencySelector, pocketFromValueSelector, pocketToCurrencySelector,\n  pocketToValueSelector, writeOffValueSelector,\n} from 'Selectors/exchange';\nimport { rateSelector } from 'Selectors/rates';\nimport { roundPlus } from 'Helpers';\n\nexport default function* exchangeSaga(): SagaIterator {\n  try {\n    const writeOffValue = writeOffValueSelector(yield select());\n    if (!writeOffValue) {\n      return;\n    }\n    const currencyFrom = pocketFromCurrencySelector(yield select());\n    const currencyTo = pocketToCurrencySelector(yield select());\n    if (currencyFrom === currencyTo) {\n      throw new Error('Currencies from and to must be different');\n    }\n\n    const pocketFromValue = pocketFromValueSelector(yield select());\n    const pocketFToValue = pocketToValueSelector(yield select());\n    const rate = rateSelector(yield select(), currencyFrom, currencyTo);\n    const receiveValue = roundPlus(writeOffValue * rate);\n\n    const pockets = {\n      [currencyFrom]: roundPlus((pocketFromValue * 100 - writeOffValue * 100) / 100),\n      [currencyTo]: roundPlus((pocketFToValue * 100 + receiveValue * 100) / 100),\n    };\n    yield all([\n      put(setPockets({ pockets })),\n      put(getSuccessAction(EXCHANGE)()),\n    ]);\n  } catch (error) {\n    yield put(getFailureAction<object>(EXCHANGE)({ error }));\n  }\n}\n","import { put } from 'redux-saga/effects';\nimport { SagaIterator } from 'redux-saga';\nimport { dropExchangeValues } from 'Redux/actions';\n\nexport default function* dropExchangeValuesSaga(): SagaIterator {\n  yield put(dropExchangeValues());\n}\n","import { all, takeEvery } from 'redux-saga/effects';\nimport { SagaIterator } from 'redux-saga';\nimport {\n  CHANGE_POCKETS, CHANGE_RECEIVE_VALUE, CHANGE_WRITE_OFF_VALUE,\n  EXCHANGE, GET_POCKETS, GET_RATES, SET_POCKET_FROM, SET_POCKET_TO,\n} from 'Constants/actionNames';\nimport { getRequestAction, getSuccessAction } from 'Redux/shared';\n\nimport getPocketsSaga from './getPocketsSaga';\nimport getRatesSaga from './getRatesSaga';\nimport changeWriteOffValueSaga from './changeWriteOffValueSaga';\nimport changeReceiveValueSaga from './changeReceiveValueSaga';\nimport exchangeSaga from './exchangeSaga';\nimport dropExchangeValuesSaga from './dropExchangeValuesSaga';\n\nexport default function* rootSaga(): SagaIterator {\n  yield all([\n    yield takeEvery(getRequestAction(GET_POCKETS).type, getPocketsSaga),\n    yield takeEvery(getRequestAction(GET_RATES).type, getRatesSaga),\n    yield takeEvery(CHANGE_WRITE_OFF_VALUE, changeWriteOffValueSaga),\n    yield takeEvery(CHANGE_RECEIVE_VALUE, changeReceiveValueSaga),\n    yield takeEvery(getRequestAction(EXCHANGE).type, exchangeSaga),\n    yield takeEvery(getSuccessAction(EXCHANGE).type, dropExchangeValuesSaga),\n    yield takeEvery(SET_POCKET_FROM, dropExchangeValuesSaga),\n    yield takeEvery(SET_POCKET_TO, dropExchangeValuesSaga),\n    yield takeEvery(CHANGE_POCKETS, dropExchangeValuesSaga),\n  ]);\n}\n","import createSagaMiddleware from 'redux-saga';\nimport { EnhancedStore, configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n\nimport errorMiddleware from './middlewares/error';\nimport rootReducer, { StateType as StateTypeReducers } from './reducers';\nimport rootSaga from './sagas';\n\nconst storeFactory = (): EnhancedStore => {\n  const sagaMiddleware = createSagaMiddleware();\n\n  const store = configureStore({\n    reducer: rootReducer,\n    middleware: [...getDefaultMiddleware(), errorMiddleware, sagaMiddleware],\n    devTools: process.env.NODE_ENV !== 'production',\n  });\n\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n};\n\nexport default storeFactory;\n\nexport type StateType = StateTypeReducers;\n","import { ComponentType } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch, bindActionCreators } from 'redux';\nimport { StateType } from 'Redux/store';\n\ntype Params = {\n  mapStateToProps?: (state: StateType, props?: any) => Record<string, any>;\n  mapDispatchToProps?: Record<string, any>;\n};\nconst commonHoc = (component: ComponentType<any>, params: Params = {}): ComponentType => {\n  const {\n    mapStateToProps = null,\n    mapDispatchToProps = null,\n  } = params;\n\n  const isConnected = mapStateToProps || mapDispatchToProps;\n\n  let ConnectedComponent = component;\n\n  if (isConnected) {\n    const dispatchMapper = !mapDispatchToProps ? null\n      : (dispatch: Dispatch): Record<string, any> => bindActionCreators(mapDispatchToProps, dispatch);\n\n    ConnectedComponent = connect(mapStateToProps, dispatchMapper)(component);\n  }\n\n  return ConnectedComponent;\n};\n\nexport default commonHoc;\n","import { createSelector } from '@reduxjs/toolkit';\nimport {\n  GET_RATES,\n} from 'Constants/actionNames';\nimport { StateType } from 'Redux/store';\n\nconst loadedSelector = (state: StateType): StateType['loaded'] => state.loaded;\n\nexport const getRatesLoadedSelector = (state: StateType): boolean => createSelector(\n  loadedSelector,\n  (loaded) => !!loaded[GET_RATES],\n)(state);\n\n","import { CURRENCIES } from 'Constants';\n\nexport const currenciesSelector = (): Array<string> => CURRENCIES;\n","\nimport styled from 'styled-components';\n\nexport const Select = styled.select`\n    padding-right: 0.7rem;\n    border: none;\n    background-color: transparent;\n`;\n","import React, { FC } from 'react';\n\nimport { Select } from './CurrencySelect.styled';\n\ntype Props = {\n  currency: string;\n  currencies: Array<string>;\n  setPocketCurrency: (currency: string) => void;\n  label: string;\n}\n\nconst CurrencySelect: FC<Props> = (props): JSX.Element => {\n  const {\n    currencies, currency, setPocketCurrency, label,\n  } = props;\n\n  const onChangeHandler = (event: React.ChangeEvent<HTMLSelectElement>): void => {\n    setPocketCurrency(event.target.value);\n  };\n\n  return (\n    <Select value={currency} onChange={onChangeHandler} aria-label={label}>\n      {currencies.map((element) => <option key={element} value={element}>{element}</option>)}\n    </Select>\n  );\n};\n\nexport default CurrencySelect;\n","\nimport styled from 'styled-components';\n\nexport const Input = styled.input`\n    -webkit-appearance: none;\n    margin: 0;\n    background-color: transparent;\n    width: 9rem;\n    padding: 0.5rem;\n\n    border-radius: 4px;\n    border: 1px solid rgba(0, 0, 0, 0.23);\n`;\n\nexport const PrefixContainer = styled.span`\n    padding: 0.5rem;\n`;\n","import React, { FC } from 'react';\n\nimport { floorPlus } from 'Helpers';\n\nimport { Input, PrefixContainer } from './ValueInput.styled';\n\ntype Props = {\n  changeValue: (value: number | null) => void;\n  value: number | null;\n  valuePrefix?: string;\n  label: string;\n}\n\nconst ValueInput: FC<Props> = (props): JSX.Element => {\n  const {\n    changeValue, value, valuePrefix = '', label,\n  } = props;\n\n  const valueChangeHandler = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    const { valueAsNumber, value: valueFromInput } = event.target;\n    if (valueFromInput === '') {\n      changeValue(null);\n    }\n    if (Number.isNaN(valueAsNumber)) {\n      return;\n    }\n    let newValue = valueAsNumber < 0 ? -valueAsNumber : valueAsNumber;\n    newValue = floorPlus(newValue);\n    changeValue(newValue);\n  };\n\n  const valueForInput = value === null ? '' : value;\n  const valuePrefixString = value === 0 ? '' : valuePrefix;\n\n  return (\n    <div>\n      <PrefixContainer>{valuePrefixString}</PrefixContainer>\n      <Input type=\"number\" value={valueForInput} step=\"0.01\" onChange={valueChangeHandler} aria-label={label} />\n    </div>\n  );\n};\n\nexport default ValueInput;\n","import React, { FC } from 'react';\n\nimport { getCurrencySymbol } from 'Helpers';\n\ntype Props = {\n  currency: string;\n  value: number;\n}\n\nconst PocketValue: FC<Props> = (props): JSX.Element => {\n  const {\n    currency,\n    value,\n  } = props;\n\n  return (\n    <span>\n      {'You have '}\n      <small>{getCurrencySymbol(currency)}</small>\n      {value.toFixed(2)}\n    </span>\n  );\n};\n\nexport default PocketValue;\n","\nimport styled from 'styled-components';\n\nexport const Container = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    padding: 1rem 0;\n`;\n\nexport const InputsLine = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    font-size: 2rem;\n`;\n\nexport const InfoLine = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    color: rgba(0, 0, 0, 0.70);\n    padding: 0.5rem 0;\n`;\n","import React, { FC, ReactNode } from 'react';\n\nimport CurrencySelect from 'Components/CurrencySelect';\nimport ValueInput from 'Components/ValueInput';\nimport PocketValue from './PocketValue';\nimport { Container, InfoLine, InputsLine } from './Pocket.styled';\n\nexport type Props = {\n  currency: string;\n  value?: number | null;\n  valueHave?: number;\n  currencies: Array<string>;\n  setPocketCurrency: () => void;\n  changeValue: () => void;\n  valuePrefix?: string;\n  inputValueLabel: string;\n  selectCurrencyLabel: string;\n  children?: ReactNode;\n}\n\nconst Pocket: FC<Props> = (props): JSX.Element => {\n  const {\n    currency, value = null, valueHave = 0, currencies, setPocketCurrency,\n    children, changeValue, valuePrefix, selectCurrencyLabel, inputValueLabel,\n  } = props;\n\n  return (\n    <Container>\n      <InputsLine>\n        <CurrencySelect\n          currency={currency}\n          currencies={currencies}\n          setPocketCurrency={setPocketCurrency}\n          label={selectCurrencyLabel}\n        />\n        <ValueInput\n          value={value}\n          valuePrefix={valuePrefix}\n          changeValue={changeValue}\n          label={inputValueLabel}\n        />\n      </InputsLine>\n      <InfoLine>\n        <PocketValue value={valueHave} currency={currency} />\n        {children}\n      </InfoLine>\n    </Container>\n  );\n};\n\nexport default Pocket;\n","import commonHoc from 'Components/commonHoc';\nimport { changeWriteOffValue, setPocketFrom } from 'Redux/actions';\nimport {\n  pocketFromCurrencySelector, pocketFromValueSelector, writeOffValueSelector,\n} from 'Selectors/exchange';\nimport { currenciesSelector } from 'Selectors/currencies';\nimport { StateType } from 'Redux/store';\n\nimport PocketFrom from './PocketFrom';\n\nconst mapStateToProps = (state: StateType): Record<string, any> => ({\n  currency: pocketFromCurrencySelector(state),\n  valueHave: pocketFromValueSelector(state),\n  currencies: currenciesSelector(),\n  value: writeOffValueSelector(state),\n});\n\nconst mapDispatchToProps = {\n  setPocketCurrency: setPocketFrom,\n  changeValue: changeWriteOffValue,\n};\n\nexport default commonHoc(PocketFrom, {\n  mapStateToProps,\n  mapDispatchToProps,\n});\n","import React, { FC } from 'react';\n\nimport Pocket, { Props as PocketProps } from 'Components/Pocket';\n\nconst PocketFrom: FC<PocketProps> = (props: PocketProps): JSX.Element => (\n  <Pocket\n    {...props}\n    valuePrefix=\"-\"\n    inputValueLabel=\"Write off amount\"\n    selectCurrencyLabel=\"Write off currency\"\n  />\n);\n\nexport default PocketFrom;\n","import { ComponentType } from 'react';\nimport commonHoc from 'Components/commonHoc';\nimport { pocketFromCurrencySelector, pocketToCurrencySelector } from 'Selectors/exchange';\nimport { rateSelector } from 'Selectors/rates';\nimport { StateType } from 'Redux/store';\n\nimport CurrentRate from './CurrentRate';\n\ntype Props = {\n  reverse?: boolean;\n}\nconst mapStateToProps = (state: StateType, props: Props): Record<string, any> => {\n  let currencyFrom;\n  let currencyTo;\n\n  if (props.reverse) {\n    currencyFrom = pocketToCurrencySelector(state);\n    currencyTo = pocketFromCurrencySelector(state);\n  } else {\n    currencyFrom = pocketFromCurrencySelector(state);\n    currencyTo = pocketToCurrencySelector(state);\n  }\n  const currentRate = rateSelector(state, currencyFrom, currencyTo);\n\n  return {\n    currentRate, currencyFrom, currencyTo,\n  };\n};\n\nexport default commonHoc(CurrentRate, {\n  mapStateToProps,\n}) as ComponentType<Props>;\n","import React, { FC } from 'react';\n\nimport { getCurrencySymbol } from 'Helpers';\n\ntype Props = {\n  currentRate: number;\n  currencyFrom: string;\n  currencyTo: string;\n}\n\nconst CurrentRate: FC<Props> = (props): JSX.Element => {\n  const {\n    currentRate, currencyFrom, currencyTo,\n  } = props;\n\n  return (\n    <span>\n      <small>{getCurrencySymbol(currencyFrom)}</small>\n      {'1 = '}\n      <small>{getCurrencySymbol(currencyTo)}</small>\n      {currentRate.toFixed(4)}\n    </span>\n  );\n};\n\nexport default CurrentRate;\n","import commonHoc from 'Components/commonHoc';\nimport { changeReceiveValue, setPocketTo } from 'Redux/actions';\nimport {\n  pocketToCurrencySelector, pocketToValueSelector, receiveValueSelector,\n} from 'Selectors/exchange';\nimport { currenciesSelector } from 'Selectors/currencies';\nimport { StateType } from 'Redux/store';\n\nimport PocketTo from './PocketTo';\n\nconst mapStateToProps = (state: StateType): Record<string, any> => ({\n  currency: pocketToCurrencySelector(state),\n  valueHave: pocketToValueSelector(state),\n  currencies: currenciesSelector(),\n  value: receiveValueSelector(state),\n});\n\nconst mapDispatchToProps = {\n  setPocketCurrency: setPocketTo,\n  changeValue: changeReceiveValue,\n};\n\nexport default commonHoc(PocketTo, {\n  mapStateToProps,\n  mapDispatchToProps,\n});\n","import React, { FC } from 'react';\n\nimport Pocket, { Props as PocketProps } from 'Components/Pocket';\nimport CurrentRate from 'Components/CurrentRate';\n\nconst PocketTo: FC<PocketProps> = (props: PocketProps): JSX.Element => (\n  <Pocket\n    {...props}\n    valuePrefix=\"+\"\n    inputValueLabel=\"Receive amount\"\n    selectCurrencyLabel=\"Receive currency\"\n  >\n    <CurrentRate reverse />\n  </Pocket>\n);\n\nexport default PocketTo;\n","\nimport styled from 'styled-components';\n\nexport const Button = styled.button`\n    display: inline-flex;\n    cursor: pointer;\n    width: fit-content;\n    line-height: 1.5rem;\n    font-size: 1rem;\n    color: white;\n    background-color: rgb(235, 0, 141);\n    padding: 1em 4.125rem;\n    border-radius: 2rem;\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,\n                box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,\n                border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n    box-shadow: 0px 3px 5px -1px rgba(0,0,0,0.2), \n                0px 6px 10px 0px rgba(0,0,0,0.14), \n                0px 1px 18px 0px rgba(0,0,0,0.12);\n\n    &[disabled] {\n        background-color: rgb(160, 160, 160);\n        box-shadow: none;\n        cursor: default;\n        pointer-events: none;\n    }\n\n    &:hover:not([disabled]) {\n        background-color: rgb(210, 0, 126);\n    }\n`;\n","import commonHoc from 'Components/commonHoc';\nimport { exchange } from 'Redux/actions';\nimport { currenciesFromToSameSelector, exchagesValuesIsSetSelector } from 'Selectors/exchange';\nimport { StateType } from 'Redux/store';\n\nimport ExchangeButton from './ExchangeButton';\n\nconst mapStateToProps = (state: StateType): Record<string, any> => ({\n  isActive: exchagesValuesIsSetSelector(state) && !currenciesFromToSameSelector(state),\n});\n\nconst mapDispatchToProps = {\n  exchange,\n};\n\nexport default commonHoc(ExchangeButton, {\n  mapStateToProps,\n  mapDispatchToProps,\n});\n","import React, { FC } from 'react';\n\nimport { Button } from './ExchangeButton.styled';\n\ntype Props = {\n  exchange: () => void;\n  isActive: boolean;\n}\n\nconst ExchangeButton: FC<Props> = (props): JSX.Element => {\n  const {\n    exchange, isActive,\n  } = props;\n\n  return (\n    <Button type=\"button\" onClick={exchange} disabled={!isActive}>\n      Exchange\n    </Button>\n  );\n};\n\nexport default ExchangeButton;\n","\nimport styled, { keyframes } from 'styled-components';\n\nconst spinner = keyframes`\n    0% {\n        transform: rotate(0deg);\n    }\n    100%{\n        transform: rotate(360deg);\n    }\n`;\n\nconst spinnerSize = '5rem';\n\nexport const Container = styled.div`\n    width: 100%;\n    height: 100%;\n    flex-grow: 1;\n    text-align: center;\n    z-index: 100;\n    background-color: rgb(255,255,255);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nexport const Spinner = styled.div`\n    position: relative;\n    width: ${spinnerSize};\n    height: ${spinnerSize};\n    margin-left: auto;\n    margin-right: auto;\n\n    div {\n        box-sizing: border-box;\n        display: block;\n        position: absolute;\n        width: ${spinnerSize};\n        height: ${spinnerSize};\n        border-radius: 50%;\n        border-width: 8px;\n        border-style: solid;\n        border-color: rgb(235, 0, 141) transparent transparent transparent;\n        animation: ${spinner} 1.3s cubic-bezier(0.49, 0.01, 0.56, 0.9) infinite;\n\n        &:nth-child(1) {\n            animation-delay: -0.45s;\n        }\n\n        &:nth-child(2) {\n            animation-delay: -0.3s;\n        }\n\n        &:nth-child(3) {\n            animation-delay: -0.15s;\n        }\n    }\n`;\n","import React, { FC } from 'react';\n\nimport { Container, Spinner } from './Loader.styled';\n\nconst Loader: FC = (): JSX.Element => (\n  <Container>\n    <Spinner>\n      <div />\n      <div />\n      <div />\n      <div />\n    </Spinner>\n  </Container>\n);\n\nexport default Loader;\n","\nimport styled from 'styled-components';\n\ntype Props = {\n    onClick: () => void;\n  }\n\nexport const Button = styled.button<Props>`\n    display: block;\n    cursor: pointer;\n    width: 100%;\n    height: 100%;\n    background-color: rgb(255, 255, 255);\n    background: url('icons/import_export-24px.svg');\n    background-repeat: no-repeat;\n    background-position: 50% 50%;\n    border-radius: inherit;\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,\n                box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,\n                border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n\n    &:hover {\n        background-color: rgb(250, 250, 250);\n    }\n`;\n","import commonHoc from 'Components/commonHoc';\nimport { changePockets } from 'Redux/actions';\n\nimport ChangePocketsButton from './ChangePocketsButton';\n\nconst mapDispatchToProps = {\n  changePockets,\n};\n\nexport default commonHoc(ChangePocketsButton, {\n  mapDispatchToProps,\n});\n","import React, { FC } from 'react';\n\nimport { Button } from './ChangePocketsButton.styled';\n\ntype Props = {\n  changePockets: () => void;\n}\nconst ChangePocketsButton: FC<Props> = (props): JSX.Element => {\n  const {\n    changePockets,\n  } = props;\n\n  return (\n    <Button type=\"button\" onClick={changePockets} aria-label=\"Change pockets\" />\n  );\n};\n\nexport default ChangePocketsButton;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-height: 30rem;\n  border: 1px solid rgba(0, 0, 0, 0.12);\n  border-radius: 4px;\n  box-shadow: 0px 2px 1px -1px rgba(0,0,0,0.2), \n              0px 1px 1px 0px rgba(0,0,0,0.14), \n              0px 1px 3px 0px rgba(0,0,0,0.12);\n`;\n\nexport const BlockFrom = styled.div`\ndisplay: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 1rem;\n  background-color: rgb(255, 255, 255);\n  position: relative;\n`;\n\nexport const BlockTo = styled.div`\ndisplay: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 1rem;\n  border-top: 1px solid rgba(0, 0, 0, 0.12);\n  background-color: rgb(243, 243, 243);\n`;\n\nexport const CurrentRateContainer = styled.div`\n    position: absolute;\n    bottom: -1rem;\n    height: 2rem;\n    display: flex;\n    align-items: center;\n    background: rgb(255, 255, 255);\n    padding: 1rem;\n    border-radius: 1rem;\n    border: 1px solid rgba(0,0,0,0.12);\n`;\n\nexport const ChangePocketsContainer = styled.div`\n    position: absolute;\n    left: 1rem;\n    bottom: -1rem;\n    height: 2rem;\n    width: 2rem;\n    display: flex;\n    align-items: center;\n    background: rgb(255, 255, 255);\n    border-radius: 1rem;\n    border: 1px solid rgba(0,0,0,0.12);\n`;\n\nexport const Title = styled.h1`\n  font-family: \"Futura New\", Futura, Avenir, sans-serif;\n  font-weight: 400;\n  line-height: 1.25;\n  font-size: 3rem;\n  text-align: center;\n  padding: 1rem;\n`;\n","import commonHoc from 'Components/commonHoc';\nimport { getPockets, getRates } from 'Redux/actions';\nimport { getRatesLoadedSelector } from 'Selectors/loaded';\nimport { StateType } from 'Redux/store';\n\nimport CurrencyConverter from './CurrencyConverter';\n\nconst mapStateToProps = (state: StateType): Record<string, any> => ({\n  isBusy: !getRatesLoadedSelector(state),\n});\n\nconst mapDispatchToProps = {\n  getRates,\n  getPockets,\n};\n\nexport default commonHoc(CurrencyConverter, {\n  mapStateToProps,\n  mapDispatchToProps,\n});\n","import React, { Component } from 'react';\n\nimport { RATES_RELOAD_PERIOD } from 'Constants';\n\nimport PocketFrom from 'Components/PocketFrom';\nimport PocketTo from 'Components/PocketTo';\nimport CurrentRate from 'Components/CurrentRate';\nimport ExchangeButton from 'Components/ExchangeButton';\nimport Loader from 'Components/Loader';\nimport ChangePocketsButton from 'Components/ChangePocketsButton';\n\nimport {\n  BlockFrom, BlockTo, ChangePocketsContainer, Container, CurrentRateContainer, Title,\n} from './CurrencyConverter.styled';\n\ntype Props = {\n  getRates: Function;\n  getPockets: Function;\n  isBusy: boolean;\n}\n\nclass CurrencyConverter extends Component<Props> {\n  interval?: number;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.interval = undefined;\n  }\n\n  componentDidMount(): void {\n    const { getRates, getPockets } = this.props;\n\n    getPockets();\n    getRates();\n    this.interval = setInterval(getRates, RATES_RELOAD_PERIOD);\n  }\n\n  componentWillUnmount(): void {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n\n  render(): JSX.Element {\n    const { isBusy } = this.props;\n\n    return (\n      <Container>\n        <Title>Currency exchange</Title>\n        {isBusy ? <Loader /> : (\n          <>\n            <BlockFrom>\n              <PocketFrom />\n              <CurrentRateContainer>\n                <CurrentRate />\n              </CurrentRateContainer>\n              <ChangePocketsContainer>\n                <ChangePocketsButton />\n              </ChangePocketsContainer>\n            </BlockFrom>\n            <BlockTo>\n              <PocketTo />\n              <ExchangeButton />\n            </BlockTo>\n          </>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default CurrencyConverter;\n","import styled from 'styled-components';\n\nexport const Container = styled.main`\n    margin: 0 auto;\n    width: fit-content;\n    padding-top: 2rem;\n`;\n","import React, { FC } from 'react';\n\nimport CurrencyConverter from 'Components/CurrencyConverter';\nimport { Container } from './App.styled';\n\nconst App: FC = (): JSX.Element => (\n  <Container>\n    <CurrencyConverter />\n  </Container>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nfunction registerValidSW(swUrl: string, config?: Config): void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registrationParam) => {\n      const registration = registrationParam;\n      registration.onupdatefound = (): void => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = (): void => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              /* eslint-disable-next-line no-console */\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              /* eslint-disable-next-line no-console */\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      /* eslint-disable-next-line no-console */\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      /* eslint-disable-next-line no-console */\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          /* eslint-disable-next-line no-console */\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport storeFactory from 'Redux/store';\n\nimport App from 'Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={storeFactory()}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}